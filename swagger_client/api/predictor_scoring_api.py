# coding: utf-8

"""
    predictor_scoring

    Credit Score Predictor  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PredictorScoringApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_and_delete_batch_execution(self, execution_id, **kwargs):  # noqa: E501
        """Cancels and deletes all batch executions for predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_and_delete_batch_execution(execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id of the execution. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_and_delete_batch_execution_with_http_info(execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_and_delete_batch_execution_with_http_info(execution_id, **kwargs)  # noqa: E501
            return data

    def cancel_and_delete_batch_execution_with_http_info(self, execution_id, **kwargs):  # noqa: E501
        """Cancels and deletes all batch executions for predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_and_delete_batch_execution_with_http_info(execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id of the execution. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['execution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_and_delete_batch_execution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `cancel_and_delete_batch_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/predictor_scoring/1.0/batch/{executionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_batch_execution_file(self, execution_id, index, file_name, **kwargs):  # noqa: E501
        """Gets a specific file from an execution in predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_execution_file(execution_id, index, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id of the execution (required)
        :param int index: Index of the execution in the batch. (required)
        :param str file_name: Name of the file to be returned. (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_batch_execution_file_with_http_info(execution_id, index, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_batch_execution_file_with_http_info(execution_id, index, file_name, **kwargs)  # noqa: E501
            return data

    def get_batch_execution_file_with_http_info(self, execution_id, index, file_name, **kwargs):  # noqa: E501
        """Gets a specific file from an execution in predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_execution_file_with_http_info(execution_id, index, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id of the execution (required)
        :param int index: Index of the execution in the batch. (required)
        :param str file_name: Name of the file to be returned. (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['execution_id', 'index', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_batch_execution_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `get_batch_execution_file`")  # noqa: E501
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_batch_execution_file`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `get_batch_execution_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501
        if 'file_name' in params:
            path_params['fileName'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/predictor_scoring/1.0/batch/{executionId}/{index}/files/{fileName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_batch_execution_files(self, execution_id, index, **kwargs):  # noqa: E501
        """Gets all files from an individual execution in predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_execution_files(execution_id, index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id of the execution (required)
        :param int index: Index of the execution in the batch. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_batch_execution_files_with_http_info(execution_id, index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_batch_execution_files_with_http_info(execution_id, index, **kwargs)  # noqa: E501
            return data

    def get_batch_execution_files_with_http_info(self, execution_id, index, **kwargs):  # noqa: E501
        """Gets all files from an individual execution in predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_execution_files_with_http_info(execution_id, index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id of the execution (required)
        :param int index: Index of the execution in the batch. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['execution_id', 'index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_batch_execution_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `get_batch_execution_files`")  # noqa: E501
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_batch_execution_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/predictor_scoring/1.0/batch/{executionId}/{index}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_batch_execution_status(self, execution_id, **kwargs):  # noqa: E501
        """Gets all batch executions for predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_execution_status(execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id of the execution (required)
        :param bool show_partial_results: Returns the already processed results of the batch execution even if it hasn't been fully completed.
        :return: BatchWebServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_batch_execution_status_with_http_info(execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_batch_execution_status_with_http_info(execution_id, **kwargs)  # noqa: E501
            return data

    def get_batch_execution_status_with_http_info(self, execution_id, **kwargs):  # noqa: E501
        """Gets all batch executions for predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_execution_status_with_http_info(execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id of the execution (required)
        :param bool show_partial_results: Returns the already processed results of the batch execution even if it hasn't been fully completed.
        :return: BatchWebServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['execution_id', 'show_partial_results']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_batch_execution_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `get_batch_execution_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []
        if 'show_partial_results' in params:
            query_params.append(('showPartialResults', params['show_partial_results']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/predictor_scoring/1.0/batch/{executionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchWebServiceResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_batch_executions(self, **kwargs):  # noqa: E501
        """Gets all batch executions for predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_executions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_batch_executions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_batch_executions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_batch_executions_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all batch executions for predictor_scoring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_executions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_batch_executions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/predictor_scoring/1.0/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def predictor_scoring(self, web_service_parameters, **kwargs):  # noqa: E501
        """predictor_scoring  # noqa: E501

        Consume the predictor_scoring web service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.predictor_scoring(web_service_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InputParameters web_service_parameters: Input parameters to the web service. (required)
        :return: WebServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.predictor_scoring_with_http_info(web_service_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.predictor_scoring_with_http_info(web_service_parameters, **kwargs)  # noqa: E501
            return data

    def predictor_scoring_with_http_info(self, web_service_parameters, **kwargs):  # noqa: E501
        """predictor_scoring  # noqa: E501

        Consume the predictor_scoring web service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.predictor_scoring_with_http_info(web_service_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InputParameters web_service_parameters: Input parameters to the web service. (required)
        :return: WebServiceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['web_service_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method predictor_scoring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'web_service_parameters' is set
        if ('web_service_parameters' not in params or
                params['web_service_parameters'] is None):
            raise ValueError("Missing the required parameter `web_service_parameters` when calling `predictor_scoring`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'web_service_parameters' in params:
            body_params = params['web_service_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/predictor_scoring/1.0', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebServiceResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_batch_execution(self, batch_web_service_parameters, **kwargs):  # noqa: E501
        """start_batch_execution  # noqa: E501

        Consume the predictor_scoring web service asynchronously.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_batch_execution(batch_web_service_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[InputParameters] batch_web_service_parameters: Input parameters to the web service. (required)
        :param int parallel_count: Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance.
        :return: StartBatchExecutionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_batch_execution_with_http_info(batch_web_service_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.start_batch_execution_with_http_info(batch_web_service_parameters, **kwargs)  # noqa: E501
            return data

    def start_batch_execution_with_http_info(self, batch_web_service_parameters, **kwargs):  # noqa: E501
        """start_batch_execution  # noqa: E501

        Consume the predictor_scoring web service asynchronously.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_batch_execution_with_http_info(batch_web_service_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[InputParameters] batch_web_service_parameters: Input parameters to the web service. (required)
        :param int parallel_count: Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance.
        :return: StartBatchExecutionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch_web_service_parameters', 'parallel_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_batch_execution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch_web_service_parameters' is set
        if ('batch_web_service_parameters' not in params or
                params['batch_web_service_parameters'] is None):
            raise ValueError("Missing the required parameter `batch_web_service_parameters` when calling `start_batch_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parallel_count' in params:
            query_params.append(('parallelCount', params['parallel_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_web_service_parameters' in params:
            body_params = params['batch_web_service_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/predictor_scoring/1.0/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartBatchExecutionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
